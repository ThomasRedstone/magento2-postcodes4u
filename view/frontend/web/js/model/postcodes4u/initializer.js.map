{"version":3,"sources":["frontend/web/js/model/postcodes4u/initializer.js"],"names":["define","addressData","Initializer","el","Strategy","scope","init","form","getForm","initAutocomplete","console","log","instance","google","maps","places","Autocomplete","types","country","setComponentRestrictions","subscribe","addListener","fillInAddress","eChange","Event","dispatchEvent","place","getPlace","geometry","strategy","newAddressData","getAddressData","address","isShowDetails"],"mappings":";;;;;;AACAA,OAAO,CACH,oDADG,CAAP,EAEG,UAAUC,WAAV,EAAuB;AACtB;;AADsB,QAGhBC,WAHgB;AAIlB;;;;;;AAMA,6BAAYC,EAAZ,EAAgBC,QAAhB,EAA0BC,KAA1B,EAA8C;AAAA,gBAAbC,IAAa,uEAAN,IAAM;;AAAA;;AAC1C,iBAAKH,EAAL,GAAUA,EAAV;AACA,iBAAKC,QAAL,GAAgBA,QAAhB;AACA,iBAAKG,IAAL,GAAaN,YAAYO,OAAZ,CAAoBH,KAApB,CAAb;;AAEA,gBAAIC,IAAJ,EAAU;AACN,qBAAKG,gBAAL,CAAsBN,EAAtB;AACH;AACJ;;AAED;;;;;;;AApBkB;AAAA;AAAA,6CAyBDA,EAzBC,EAyBG;AAAA;;AACjBO,wBAAQC,GAAR,CAAY,wBAAZ;AACA,oBAAMC,WAAW,IAAIC,OAAOC,IAAP,CAAYC,MAAZ,CAAmBC,YAAvB,CAAoCb,EAApC,EAAwC,EAACc,OAAO,CAAC,SAAD,CAAR,EAAxC,CAAjB;AACA,oBAAI,KAAKV,IAAL,CAAUW,OAAV,EAAJ,EAAyB;AACrBN,6BAASO,wBAAT,CAAkC,EAAC,WAAW,KAAKZ,IAAL,CAAUW,OAAV,EAAZ,EAAlC;AACH;;AAED,qBAAKX,IAAL,CAAUW,OAAV,CAAkBE,SAAlB,CAA4B,UAACF,OAAD,EAAa;AACrCN,6BAASO,wBAAT,CAAkC,EAAC,WAAWD,OAAZ,EAAlC;AACH,iBAFD;;AAIAN,yBAASS,WAAT,CAAqB,eAArB,EAAqC,YAAM;AACvC,0BAAKC,aAAL,CAAmBV,QAAnB;AACA,wBAAMW,UAAU,IAAIC,KAAJ,CAAU,QAAV,CAAhB;AACArB,uBAAGsB,aAAH,CAAiBF,OAAjB;AACH,iBAJD;AAKH;AAzCiB;AAAA;;;AA2ClB;;;AA3CkB,0CA8CJX,QA9CI,EA8CM;AACpB,oBAAMc,QAAQd,SAASe,QAAT,EAAd;AACA,oBAAI,CAACD,MAAME,QAAX,EAAqB;AACjB;AACH;;AAED,oBAAMC,WAAW,IAAI,KAAKzB,QAAT,CAAkBsB,KAAlB,CAAjB;AACA,oBAAMI,iBAAiBD,SAASE,cAAT,EAAvB;;AAEA,oBAAID,cAAJ,EAAoB;AAChB,yBAAKvB,IAAL,CAAUyB,OAAV,CAAkBF,cAAlB;AACA,yBAAKvB,IAAL,CAAU0B,aAAV,CAAwB,IAAxB;AACH;AACJ;AA3DiB;;AAAA;AAAA;;AA8DtB,WAAO/B,WAAP;AACH,CAjED","file":"initializer.js","sourcesContent":["\ndefine([\n    'Postcodes4uAddressLookup/model/address/addressData',\n], function (addressData) {\n    \"use strict\";\n\n    class Initializer {\n        /**\n         * @param {element} el\n         * @param Strategy\n         * @param {string} scope\n         * @param {bool} init\n         */\n        constructor(el, Strategy, scope, init = true) {\n            this.el = el;\n            this.Strategy = Strategy;\n            this.form =  addressData.getForm(scope);\n\n            if (init) {\n                this.initAutocomplete(el);\n            }\n        }\n\n        /**\n         * Initializes Postcodes place autocomplete.\n         *\n         * @param {element} el\n         */\n        initAutocomplete(el) {\n            console.log('Google code running...');\n            const instance = new google.maps.places.Autocomplete(el, {types: ['address']});\n            if (this.form.country()) {\n                instance.setComponentRestrictions({'country': this.form.country()});\n            }\n\n            this.form.country.subscribe((country) => {\n                instance.setComponentRestrictions({'country': country});\n            });\n\n            instance.addListener('place_changed',() => {\n                this.fillInAddress(instance);\n                const eChange = new Event('change');\n                el.dispatchEvent(eChange);\n            });\n        };\n\n        /**\n         * @param {object} instance\n         */\n        fillInAddress(instance) {\n            const place = instance.getPlace();\n            if (!place.geometry) {\n                return;\n            }\n\n            const strategy = new this.Strategy(place);\n            const newAddressData = strategy.getAddressData();\n\n            if (newAddressData) {\n                this.form.address(newAddressData);\n                this.form.isShowDetails(true);\n            }\n        }\n    }\n\n    return Initializer;\n});\n"]}